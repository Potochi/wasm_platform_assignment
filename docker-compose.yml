# vim: set ts=2 sw=2:
---
version: "3"

services:
  database:
    image: mariadb:latest

    environment:
      MARIADB_ROOT_PASSWORD: secretmysqlpassword123
      MARIADB_DATABASE: aws

    networks:
      database_net:

    volumes:
      - database_data:/var/lib/mysql

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1


  backend:
    build:
      dockerfile: ./Backend.dockerfile
      args:
        DOCKER_BUILDKIT: 1

    image: serverless-backend

    environment:
      DB_URL: mysql://root:secretmysqlpassword123@database:3306/aws
      LISTEN_ADDR: 0.0.0.0:3000
      RUST_LOG: info
      JWT_PRIVATE_KEY_PATH: /keys/jwt-private.pem
      JWT_PUBLIC_KEY_PATH: /keys/jwt-public.pem

    volumes:
      - ./secrets/jwt-public.pem:/keys/jwt-public.pem:ro

    labels:
      - traefik.enable=false
      - traefik.http.routers.backend.entrypoints=web,websecure
      - traefik.http.routers.backend.tls=true
      - traefik.http.routers.backend.rule=Host(`backend.surface.home`)
      - traefik.http.services.backend.loadbalancer.server.port=3000

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1

      labels:
        - traefik.enable=true
        - traefik.http.routers.backend.entrypoints=web,websecure
        - traefik.http.routers.backend.tls=true
        - traefik.http.routers.backend.rule=Host(`backend.surface.home`)
        - traefik.http.services.backend.loadbalancer.server.port=3000

    networks:
      database_net:
      backend_net:
      prometheus_net:
      gateway_net:
      auth_net:

  dashboard:
    build:
      dockerfile: ./Dashboard.dockerfile
    image: serverless-dashboard

    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.entrypoints=web,websecure
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.rule=Host(`dashboard.surface.home`)
      - traefik.http.services.dashboard.loadbalancer.server.port=80

    networks:
      gateway_net:
      backend_net:


    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1

      labels:
        - traefik.enable=true
        - traefik.http.routers.dashboard.entrypoints=web,websecure
        - traefik.http.routers.dashboard.tls=true
        - traefik.http.routers.dashboard.rule=Host(`dashboard.surface.home`)
        - traefik.http.services.dashboard.loadbalancer.server.port=80

  portainer:
    image: portainer/portainer-ce:latest

    command: --sslcert /run/secrets/ssl_cert --sslkey /run/secrets/ssl_key

    ports:
      - 9443:9443

    networks:
      portainer_agents:

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1

      placement:
        constraints:
          - "node.role==manager"

    volumes:
      - portainer_data:/data

    secrets:
      - ssl_key
      - ssl_cert

  portainer_manager_agent:
    image: portainer/agent:2.18.2

    networks:
      portainer_agents:

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1

      placement:
        constraints:
          - "node.role == manager"
          - "node.platform.os == linux"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  cloudbeaver:
    image: dbeaver/cloudbeaver

    networks:
      database_net:
      gateway_net:

    volumes:
      - cloudbeaver_data:/opt/cloudbeaver/workspace

    labels:
      - traefik.enable=true
      - traefik.http.routers.cloudbeaver.entrypoints=web,websecure
      - traefik.http.routers.cloudbeaver.tls=true
      - traefik.http.routers.cloudbeaver.rule=Host(`cloudbeaver.surface.home`)
      - traefik.http.services.cloudbeaver.loadbalancer.server.port=8978

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1

      labels:
        - traefik.enable=true
        - traefik.http.routers.dashboard.entrypoints=web,websecure
        - traefik.http.routers.dashboard.tls=true
        - traefik.http.routers.dashboard.rule=Host(`dashboard.surface.home`)
        - traefik.http.services.dashboard.loadbalancer.server.port=80


  prometheus:
    image: prom/prometheus:latest

    volumes:
      - ./prometheus:/etc/prometheus:ro

    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.entrypoints=web,websecure
      - traefik.http.routers.prometheus.tls=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.surface.home`)
      - traefik.http.services.prometheus.loadbalancer.server.port=9090

    networks:
      prometheus_net:
      gateway_net:

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1

      labels:
        - traefik.enable=false
        - traefik.http.routers.prometheus.entrypoints=web,websecure
        - traefik.http.routers.prometheus.tls=true
        - traefik.http.routers.prometheus.rule=Host(`prometheus.surface.home`)
        - traefik.http.services.prometheus.loadbalancer.server.port=9090

  gateway:
    image: traefik:latest

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/:/etc/traefik/:ro
      - ./secrets/:/etc/traefik_certs/:ro

    labels:
      - traefik.enable=true

    networks:
      gateway_net:

    ports:
      - 80:80
      - 443:443
      - 8080:8080

  grafana:
    image: grafana/grafana-oss

    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.entrypoints=web,websecure
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.rule=Host(`grafana.surface.home`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000

    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana_provisioning:/etc/grafana/provisioning:ro

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1

      labels:
        - traefik.enable=true
        - traefik.http.routers.grafana.entrypoints=web,websecure
        - traefik.http.routers.grafana.tls=true
        - traefik.http.routers.grafana.rule=Host(`grafana.surface.home`)
        - traefik.http.services.grafana.loadbalancer.server.port=3000


    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin1

    networks:
      prometheus_net:
      gateway_net:

  auth:
    build:
      dockerfile: ./Auth.dockerfile
      args:
        DOCKER_BUILDKIT: 1

    image: serverless-auth

    networks:
      auth_net:

    environment:
      LISTEN_ADDR: 0.0.0.0:3000
      RUST_LOG: info
      JWT_PRIVATE_KEY_PATH: /keys/jwt-private.pem

    volumes:
      - ./secrets/jwt-private-pkcs8.pem:/keys/jwt-private.pem:ro

  master_exporter:
    image: quay.io/prometheus/node-exporter:latest

    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'

    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      replicas: 1
      placement:
        constraints:
          - "node.role == manager"

    networks:
      prometheus_net:

networks:
  backend_net:
  database_net:
  prometheus_net:
  auth_net:
  gateway_net:
    name: gateway_net
  portainer_agents:

volumes:
  database_data:
  cloudbeaver_data:
  grafana_data:
  portainer_data:

secrets:
  ssl_cert:
    file: ./secrets/cert.crt

  ssl_key:
    file: ./secrets/cert.key
